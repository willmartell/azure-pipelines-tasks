trigger:
- master
- releases/*

resources:
  repositories:
  - repository: AzureDevOps
    type: git
    endpoint: AzureDevOps
    name: AzureDevOps/AzureDevOps

jobs:

# All tasks on Windows
- job: build_all_windows
  displayName: Build all tasks (Windows)
  condition: and(succeeded(), not(variables.task), eq(variables.os, 'Windows_NT'))
  pool:
    vmImage: vs2017-win2016
  timeoutInMinutes: 90
  steps:
  - template: ci/build-all-steps.yml
    parameters:
      os: Windows_NT

# Publish on Windows
- job: publish_windows
  displayName: Publish
  dependsOn: 
  - build_all_windows
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), eq(variables.os, 'Windows_NT'))
  pool:
    vmImage: vs2017-win2016
  steps:
  - template: ci/publish-steps.yml

# Courtesy push on Windows
- job: courtesy_push_windows
  displayName: Courtesy Push
  dependsOn: 
  - publish_windows
  condition: and(succeeded(), in(variables['build.reason'], 'Schedule', 'Manual'), eq(variables['COURTESY_PUSH'], 'true'))
  pool:
    vmImage: vs2017-win2016
  steps:
  - checkout: AzureDevOps
    fetchDepth: 1
    persistCredentials: true
  - checkout: self
  - template: ci/courtesy-push.yml

# All tasks on Linux
- job: build_all_linux
  displayName: Build all tasks (Linux)
  condition: and(succeeded(), not(variables.task), eq(variables.os, 'Linux'))
  pool:
    vmImage: ubuntu-16.04
  steps:
  - template: ci/build-all-steps.yml
    parameters:
      os: Linux

# All tasks on macOS
# - job: build_all_darwin
#  displayName: Build all tasks (macOS)
##  condition: and(succeeded(), not(variables.task), eq(variables.os, 'Darwin'))
#  pool:
#    vmImage: macos-10.15
#  steps:
#  - template: ci/build-all-steps.yml
#    parameters:
#      os: Darwin

# Single task
- job: buildSingle
  displayName: Build single task
  condition: and(succeeded(), variables.task)
  steps:
  - template: ci/build-single-steps.yml
